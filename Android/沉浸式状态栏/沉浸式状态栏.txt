

首先看下第一种方式

系统的方式沉浸式状态栏实现

代码：

//当系统版本为4.4或者4.4以上时可以使用沉浸式状态栏
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
	//透明状态栏
	getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
	//透明导航栏
getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);
}

布局（一般是在标题栏添加）:
        android:fitsSystemWindows="true"
        android:clipToPadding="true"
		
		
		
		
第二种方式：（做手机屏幕适配最好）

开发问题：华为手机是有底部导航栏的，在做的时候要适当做一下适配。

代码：
/**
* 动态的设置状态栏  实现沉浸式状态栏
*
*/
private void initState() {

//当系统版本为4.4或者4.4以上时可以使用沉浸式状态栏
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
	//透明状态栏
	getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
	//透明导航栏
	//getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);
	//这个控件在布局中的最上面
	LinearLayout linear_bar = (LinearLayout) findViewById(R.id.ll_bar);
	linear_bar.setVisibility(View.VISIBLE);
	//获取到状态栏的高度
	int statusHeight = getStatusBarHeight();
	//动态的设置隐藏布局的高度
	LinearLayout.LayoutParams params = (LinearLayout.LayoutParams) linear_bar.getLayoutParams();
	params.height = statusHeight;
	linear_bar.setLayoutParams(params);
}
}

/**
* 通过反射的方式获取状态栏高度
*
* @return
*/
private int getStatusBarHeight() {
try {
	Class<?> c = Class.forName("com.android.internal.R$dimen");
	Object obj = c.newInstance();
	Field field = c.getField("status_bar_height");
	int x = Integer.parseInt(field.get(obj).toString());
	return getResources().getDimensionPixelSize(x);
} catch (Exception e) {
	e.printStackTrace();
}
return 0;
}
}

//代码获取状态栏的高度

public int getStatusHeight() {
	int result = 0;
	int resourceId = getResources().getIdentifier("status_bar_height", "dimen",
			"android");
	if (resourceId > 0) {
		result =getResources().getDimensionPixelSize(resourceId);
	}
	return result;
}

//代码获取底部导航栏的高度
public int getDaoHangHeight() {
	int result = 0;
	int resourceId=0;
	int rid = getResources().getIdentifier("config_showNavigationBar", "bool", "android");
	if (rid!=0){
		resourceId = getResources().getIdentifier("navigation_bar_height", "dimen", "android");
		Log.d("test","高度："+resourceId);
		Log.d("test","高度："+getResources().getDimensionPixelSize(resourceId) +"");
		return getResources().getDimensionPixelSize(resourceId);
	}else
		return 0;
}

布局：
 <!--这个是隐藏的布局，然后通过动态的设置高度达到效果-->
    <LinearLayout
        android:id="@+id/ll_bar"
        android:layout_width="fill_parent"
        android:layout_height="1dp"
        android:orientation="vertical"
        android:background="#e7abff"
        android:visibility="gone">
    </LinearLayout>
	
	
	
第三种：（不推荐使用，因为在Android4.4以后安卓官方给开发者提供了一套能透明的系统ui样式给状态栏和导航栏（见方法一））
github上的第三方库

1.库地址:https://github.com/jgilfelt/SystemBarTint
2.添加依赖库: 
compile ‘com.readystatesoftware.systembartint:systembartint:1.0.3’

布局：
	android:fitsSystemWindows="true"
	android:clipToPadding="true

	
代码：
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
	//透明状态栏
	getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
	//透明导航栏
	getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);
	SystemBarTintManager tintManager = new SystemBarTintManager(this);
	// 激活状态栏
	tintManager.setStatusBarTintEnabled(true);
	// enable navigation bar tint 激活导航栏
	tintManager.setNavigationBarTintEnabled(true);
	//设置系统栏设置颜色
	//tintManager.setTintColor(R.color.red);
	//给状态栏设置颜色
	tintManager.setStatusBarTintResource(R.color.mask_tags_1);
	//Apply the specified drawable or color resource to the system navigation bar.
	//给导航栏设置资源
	tintManager.setNavigationBarTintResource(R.color.mask_tags_1);
}
































